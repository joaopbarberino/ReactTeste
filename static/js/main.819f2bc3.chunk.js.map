{"version":3,"sources":["SeasonDisplay.js","Loading.js","ErrorPage.js","index.js"],"names":["SeasonDisplay","props","lat","month","season","Date","getMonth","text","iconName","react_default","a","createElement","className","concat","Loading","message","defaultProps","ErrorPage","App","state","errorMessage","_this2","this","window","navigator","geolocation","getCurrentPosition","position","setState","coords","latitude","err","console","log","src_ErrorPage_0","src_SeasonDisplay_0","src_Loading","renderContent","React","Component","ReactDOM","render","src_App","document","querySelector"],"mappings":"iNA8BeA,SAfO,SAAAC,GAClB,IAbeC,EAAKC,EAadC,GAbSF,EAaUD,EAAMC,KAbXC,GAagB,IAAIE,MAAOC,YAXnC,GAAKH,EAAQ,EAEdD,EAAM,EAAI,SAAW,SAGrBA,EAAM,EAAI,SAAW,UAQ1BK,EAAkB,WAAXH,EAAsB,oBAAsB,sBACnDI,EAAsB,WAAXJ,EAAsB,YAAc,MAErD,OACIK,EAAAC,EAAAC,cAAA,OAAKC,UAAS,kBAAAC,OAAoBT,IAC9BK,EAAAC,EAAAC,cAAA,KAAGC,UAAS,qBAAAC,OAAuBL,EAAvB,WACZC,EAAAC,EAAAC,cAAA,UAAKJ,GACLE,EAAAC,EAAAC,cAAA,KAAGC,UAAS,sBAAAC,OAAwBL,EAAxB,cCvBlBM,EAAU,SAACb,GACb,OACIQ,EAAAC,EAAAC,cAAA,OAAKC,UAAU,oBACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,0BAA0BX,EAAMc,WAM3DD,EAAQE,aAAe,CACnBD,QAAS,cAGED,QCZTG,SAAY,SAAChB,GACf,OAGIQ,EAAAC,EAAAC,cAAA,OAAKC,UAAU,0CACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACXH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,qBACbH,EAAAC,EAAAC,cAAA,UACKV,EAAMc,aAQ3BE,EAAUD,aAAe,CACrBD,QAAS,wBAGEE,QCjBTC,6MACFC,MAAQ,CAAEjB,IAAK,KAAMkB,aAAc,uFAEf,IAAAC,EAAAC,KAChBC,OAAOC,UAAUC,YAAYC,mBAEzB,SAACC,GAEGN,EAAKO,SAAS,CAAE1B,IAAKyB,EAASE,OAAOC,YAGzC,SAACC,GACGV,EAAKO,SAAS,CAAER,aAAcW,EAAIhB,UAClCiB,QAAQC,IAAIF,6CAMpB,OAAIT,KAAKH,MAAMC,eAAiBE,KAAKH,MAAMjB,IAChCO,EAAAC,EAAAC,cAACuB,EAAD,CAAWnB,QAASO,KAAKH,MAAMC,gBAErCE,KAAKH,MAAMC,cAAgBE,KAAKH,MAAMjB,IAChCO,EAAAC,EAAAC,cAACwB,EAAD,CAAejC,IAAKoB,KAAKH,MAAMjB,MAGnCO,EAAAC,EAAAC,cAACyB,EAAD,CAASrB,QAAQ,4FAKxB,OACIN,EAAAC,EAAAC,cAAA,WACKW,KAAKe,wBAjCJC,IAAMC,WAuCxBC,IAASC,OACLhC,EAAAC,EAAAC,cAAC+B,EAAD,MACAC,SAASC,cAAc","file":"static/js/main.819f2bc3.chunk.js","sourcesContent":["import './SeasonDisplay.css';\nimport React from 'react';\n\nconst getSeason = (lat, month) => {\n    // Se está entre mês 3 e mês 9\n    if (month > 2 && month < 9) {\n        // Se lat > 0 (hemisfério norte), retorna 'summer', se não, retorna 'winter'\n        return lat > 0 ? 'summer' : 'winter';\n    } else {\n        // Se lat > 0 (hemisfério norte), retorna 'winter', se não, retorna 'summer'\n        return lat > 0 ? 'winter' : 'summer';\n    }\n}\n\n\nconst SeasonDisplay = props => {\n    const season = getSeason(props.lat, new Date().getMonth());\n    //           season igual winter ?    retorna isso   se nao    retorna isso\n    const text = season === 'winter' ? 'Burr, it is cold!' : 'Lets hit the beach!';\n    const iconName = season === 'winter' ? 'snowflake' : 'sun';\n\n    return (\n        <div className={`season-display ${season}`}>\n            <i className={`icon-left massive ${iconName} icon`} />\n            <h1>{text}</h1>\n            <i className={`icon-right massive ${iconName} icon`} />\n        </div>\n    );\n}\n\nexport default SeasonDisplay;","import React from 'react';\n\nconst Loading = (props) => {\n    return (\n        <div className=\"ui active dimmer\">\n            <div className=\"ui massive text loader\">{props.message}</div>\n        </div>\n       \n    );\n}\n\nLoading.defaultProps = {\n    message: \"Loading...\",\n};\n\nexport default Loading;","import './ErrorPage.css';\nimport React from 'react';\n\nconst ErrorPage = (props) => {\n    return (\n\n\n        <div className=\"ui one column centered grid background\">\n            <div className=\"content\">\n                <i className=\"massive icon ban\" />\n                <h1>\n                    {props.message}\n                </h1>\n\n            </div>\n        </div>\n    );\n}\n\nErrorPage.defaultProps = {\n    message: \"Something went wrong\"\n}\n\nexport default ErrorPage;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport SeasonDisplay from './SeasonDisplay';\nimport Loading from './Loading';\nimport ErrorPage from './ErrorPage';\n\nclass App extends React.Component {\n    state = { lat: null, errorMessage: '' }\n\n    componentDidMount() {\n        window.navigator.geolocation.getCurrentPosition(\n            // Callback 1  - sucesso\n            (position) => {\n                // States só podem ser atualizados através dessa função!!!\n                this.setState({ lat: position.coords.latitude });\n            },\n            // Callback 2 - erro\n            (err) => {\n                this.setState({ errorMessage: err.message });\n                console.log(err);\n            }\n        );\n    }\n\n    renderContent() {\n        if (this.state.errorMessage && !this.state.lat) {\n            return <ErrorPage message={this.state.errorMessage}/>;\n        }\n        if (!this.state.errorMessage && this.state.lat) {\n            return <SeasonDisplay lat={this.state.lat} />;\n        }\n\n        return <Loading message=\"Please wait, or accept location request if you haven't\" />;\n    }\n\n    // Precisa ter um render\n    render() {\n        return (\n            <div>\n                {this.renderContent()}\n            </div>\n        )\n    }\n}\n\nReactDOM.render(\n    <App />,\n    document.querySelector(\"#root\")\n);\n"],"sourceRoot":""}